def h1(State s, State prev, float prev_hueristic_value):
	if ApplicableH(s) is True:
		return h0(s)
	if is_goal(s):
		return 0
	if prev is None:
		return 0
	inherited_cost = max(prev_hueristic_value - cost(prev, s), 0)
	return inherited_cost
		
def h2(State s, State prev):
	if ApplicableH(s) is True:
		return h0(s)
	if is_goal(s):
		return 0
	if prev is None:
		return 0
	inherited_cost = max(prev_hueristic_value - cost(prev, s), 0)
	old_cost = cache.load_cost(s)
	if old_cost is not None:
		if old_cost < inherited_cost:
			cache.store_cost(s, inherited_cost)
			return inherited_cost
		else:
			return old_cost
	cache.store_cost(s, inherited_cost)
	return inherited_cost
		
		